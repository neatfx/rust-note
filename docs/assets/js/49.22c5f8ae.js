(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{245:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"利用-deref-特质进行常规引用操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#利用-deref-特质进行常规引用操作"}},[s._v("#")]),s._v(" 利用 "),a("code",[s._v("Deref")]),s._v(" 特质进行常规引用操作")]),s._v(" "),a("h2",{attrs:{id:"解引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解引用"}},[s._v("#")]),s._v(" 解引用")]),s._v(" "),a("p",[s._v("解引用运算符 "),a("code",[s._v("*")]),s._v("（ dereference operator ）")]),s._v(" "),a("p",[s._v("通过解引用运算符可以追踪以下指针类型的值：")]),s._v(" "),a("ul",[a("li",[s._v("常规引用")]),s._v(" "),a("li",[s._v("内置智能指针")]),s._v(" "),a("li",[s._v("自定义智能指针（ 通过实现 "),a("code",[s._v("Deref")]),s._v(" 特质重载解引用运算符，从而可当作常规引用进行操作 ）")])]),s._v(" "),a("h3",{attrs:{id:"常规引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常规引用"}},[s._v("#")]),s._v(" 常规引用")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 引用")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译错误: can't compare `{integer}` with `&{integer}`")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// assert_eq!(5, y);")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 解引用")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"智能指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#智能指针"}},[s._v("#")]),s._v(" 智能指针")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"自定义智能指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义智能指针"}},[s._v("#")]),s._v(" 自定义智能指针")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("Deref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" MyBox"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" MyBox"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" MyBox"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// impl<T> Deref for MyBox<T> {")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     type Target = T; // 定义关联类型")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     fn deref(&self) -> &T {")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//         &self.0 // 返回希望通过 * 运算符访问的值的引用")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//     }")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// }")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" MyBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 编译错误: type `MyBox<{integer}>` cannot be dereferenced")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("assert_eq!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("没有 "),a("code",[s._v("Deref")]),s._v(" 特质的情况下，编译器只会解引用 "),a("code",[s._v("&")]),s._v(" 引用类型。因此 Rust 无法对 "),a("code",[s._v("MyBox<T>")]),s._v(" （ 非引用类型 ）进行解引用，导致编译时错误。")]),s._v(" "),a("p",[s._v("任何实现了 "),a("code",[s._v("Deref")]),s._v(" 特质的类型，编译器通过 "),a("code",[s._v("deref")]),s._v(" 方法可以获取：")]),s._v(" "),a("ul",[a("li",[s._v("类型的值")]),s._v(" "),a("li",[s._v("一个内部数据的 "),a("code",[s._v("&")]),s._v(" 引用（ 类型知道如何将其解引用 ）")])]),s._v(" "),a("p",[s._v("在 Rust 内部， 解引用操作 "),a("code",[s._v("*y")]),s._v(" 将被转换为 "),a("code",[s._v("*(y.deref())")]),s._v(" ( 调用 "),a("code",[s._v("deref")]),s._v(" 方法后直接引用 ）")]),s._v(" "),a("h4",{attrs:{id:"代码修正"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码修正"}},[s._v("#")]),s._v(" 代码修正")]),s._v(" "),a("p",[s._v("将实现 "),a("code",[s._v("Deref")]),s._v(" 特质部分的代码取消注释即可通过编译")]),s._v(" "),a("h4",{attrs:{id:"所有权规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#所有权规范"}},[s._v("#")]),s._v(" 所有权规范")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("deref")]),s._v(" 方法的返回结果为值的引用（ 如果直接返回值，值的所有权将被移出 "),a("code",[s._v("self")]),s._v(" ）")]),s._v(" "),a("li",[s._v("底层转换 "),a("code",[s._v("*(y.deref())")]),s._v(" 采用普通解引用的形式")])]),s._v(" "),a("p",[s._v("这是因为，多数情况下，使用解引用运算符的时候不需要获取 "),a("code",[s._v("MyBox<T>")]),s._v(" 内部值的所有权")]),s._v(" "),a("h2",{attrs:{id:"解引用强制多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解引用强制多态"}},[s._v("#")]),s._v(" 解引用强制多态")]),s._v(" "),a("h3",{attrs:{id:"函数或方法传参时的隐式解引用强制多态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数或方法传参时的隐式解引用强制多态"}},[s._v("#")]),s._v(" 函数或方法传参时的隐式解引用强制多态")]),s._v(" "),a("p",[s._v("将实现了 "),a("code",[s._v("Deref")]),s._v(" 的类型的引用转换为原始类型通过 "),a("code",[s._v("Deref")]),s._v(" 所能够转换的类型的引用")]),s._v(" "),a("p",[s._v("传递与形参类型不同的特定类型实参（ 实现了 "),a("code",[s._v("Deref")]),s._v(" 的类型的引用 ）时，解引用强制多态自动发生，通过一系列 "),a("code",[s._v("deref")]),s._v(" 方法调用，实参类型被转换成形参类型。这种隐式转换无需过多的显式引用和解引用，也使得编写同时作用于引用或智能指针的代码更容易。")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" std"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("ops"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),s._v("Deref"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")]),s._v(" MyBox"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" MyBox"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" MyBox"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("MyBox")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("impl")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" Deref "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" MyBox"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("T"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" Target "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("deref")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("T "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, {}!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" MyBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Rust"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Rust"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 字符串 slice 作为参数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果没有解引用强制多态支持，需编写晦涩的转换代码")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 解引用强制多态，直接使用 MyBox<String> 类型值的引用作为参数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h4",{attrs:{id:"缺少解引用强制多态支持的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺少解引用强制多态支持的情况"}},[s._v("#")]),s._v(" 缺少解引用强制多态支持的情况")]),s._v(" "),a("p",[a("code",[s._v("(*m)")]),s._v(" 将 "),a("code",[s._v("MyBox<String>")]),s._v(" 解引用为 String。接着 "),a("code",[s._v("&")]),s._v(" 和 "),a("code",[s._v("[..]")]),s._v(" 获取了整个 String 的字符串 slice 来匹配 hello 的签名，所有这些符号混在一起难以读写和理解。")]),s._v(" "),a("h4",{attrs:{id:"解引用强制多态的处理过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解引用强制多态的处理过程"}},[s._v("#")]),s._v(" 解引用强制多态的处理过程")]),s._v(" "),a("p",[a("code",[s._v("MyBox<T>")]),s._v(" 实现了 "),a("code",[s._v("Deref")]),s._v(" 特质，Rust 通过调用 "),a("code",[s._v("deref")]),s._v(" 将 "),a("code",[s._v("&MyBox<String>")]),s._v(" 转换为 "),a("code",[s._v("&String")]),s._v("，标准库中提供了 "),a("code",[s._v("String")]),s._v(" 上的 "),a("code",[s._v("Deref")]),s._v(" 实现（ 返回字符串 slice ），Rust 再次调用 "),a("code",[s._v("deref")]),s._v(" 将 "),a("code",[s._v("&String")]),s._v(" 变为 "),a("code",[s._v("&str")]),s._v("，从而符合 "),a("code",[s._v("hello")]),s._v(" 函数的定义。")]),s._v(" "),a("h4",{attrs:{id:"性能提示"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能提示"}},[s._v("#")]),s._v(" 性能提示")]),s._v(" "),a("p",[s._v("当类型实现了 "),a("code",[s._v("Deref")]),s._v(" 特质，Rust 会分析这些类型并使用任意多次 "),a("code",[s._v("Deref::deref")]),s._v(" 调用以获得匹配参数的类型。这些解析都发生在编译时，所以解引用强制多态没有运行时性能损失。")]),s._v(" "),a("h3",{attrs:{id:"解引用强制多态如何与可变性交互"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解引用强制多态如何与可变性交互"}},[s._v("#")]),s._v(" 解引用强制多态如何与可变性交互")]),s._v(" "),a("ul",[a("li",[s._v("重载不可变引用的 "),a("code",[s._v("*")]),s._v(" 运算符 ---\x3e 实现 "),a("code",[s._v("Deref")]),s._v(" 特质")]),s._v(" "),a("li",[s._v("重载可变引用的 "),a("code",[s._v("*")]),s._v(" 运算符 ---\x3e 实现 "),a("code",[s._v("DerefMut")]),s._v(" 特质")])]),s._v(" "),a("p",[s._v("Rust 在发现以下三种情况时会进行解引用强制多态：")]),s._v(" "),a("ul",[a("li",[s._v("当 "),a("code",[s._v("T: Deref<Target=U>")]),s._v(" 时，从 "),a("code",[s._v("&T")]),s._v(" 到 "),a("code",[s._v("&U")])]),s._v(" "),a("li",[s._v("当 "),a("code",[s._v("T: DerefMut<Target=U>")]),s._v(" 时，从 "),a("code",[s._v("&mut T")]),s._v(" 到 "),a("code",[s._v("&mut U")])]),s._v(" "),a("li",[s._v("当 "),a("code",[s._v("T: Deref<Target=U>")]),s._v(" 时，从 "),a("code",[s._v("&mut T")]),s._v(" 到 "),a("code",[s._v("&U")])])]),s._v(" "),a("p",[s._v("前两种情况除了可变性之外是相同的：")]),s._v(" "),a("h4",{attrs:{id:"第一种情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一种情况"}},[s._v("#")]),s._v(" 第一种情况")]),s._v(" "),a("p",[s._v("如果有一个 "),a("code",[s._v("&T")]),s._v("，而 "),a("code",[s._v("T")]),s._v(" 实现了返回 "),a("code",[s._v("U")]),s._v(" 类型的 "),a("code",[s._v("Deref")]),s._v("，则可以直接得到 "),a("code",[s._v("&U")])]),s._v(" "),a("h4",{attrs:{id:"第二种情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二种情况"}},[s._v("#")]),s._v(" 第二种情况")]),s._v(" "),a("p",[s._v("对于可变引用有着与不可变引用相同的行为")]),s._v(" "),a("h4",{attrs:{id:"第三种情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三种情况"}},[s._v("#")]),s._v(" 第三种情况")]),s._v(" "),a("blockquote",[a("p",[s._v("如果有一个可变引用，其必须是这些数据的唯一引用，否则程序将无法编译")])]),s._v(" "),a("p",[s._v("根据上述借用规则，可变引用能够转换为不可变引用（ 永远不会违背借用规则 ），反之是不可能的。\n将不可变引用转换为可变引用需要数据只能有一个不可变引用，而借用规则无法保证这一点。\n因此，Rust 无法假设将不可变引用转换为可变引用是可能的。")])])}),[],!1,null,null,null);t.default=e.exports}}]);