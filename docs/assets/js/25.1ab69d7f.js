(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{224:function(t,s,a){"use strict";a.r(s);var r=a(0),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程模型"}},[t._v("#")]),t._v(" 线程模型")]),t._v(" "),a("h2",{attrs:{id:"线程模型分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程模型分类"}},[t._v("#")]),t._v(" 线程模型分类")]),t._v(" "),a("ul",[a("li",[t._v("由语言调用操作系统 API 创建线程的模型被称为 1:1 模型（ 一个 OS 线程对应一个语言线程 ）")]),t._v(" "),a("li",[t._v("由语言提供实现的线程被称为绿色线程，也被称为 M:N 模型（ 语言会在 N 个 OS 线程的上下文中执行 M 个线程 ）")])]),t._v(" "),a("h2",{attrs:{id:"线程模型-rust"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程模型-rust"}},[t._v("#")]),t._v(" 线程模型 @ Rust")]),t._v(" "),a("p",[t._v("每一种线程模型都有其优势和取舍，对于 Rust 来说最重要的取舍是运行时支持。")]),t._v(" "),a("ul",[a("li",[t._v("Rust 需要做到几乎没有运行时（ 更小的二进制输出，易于在更多上下文中与其他语言相结合，比如调用 C 语言 ）")]),t._v(" "),a("li",[t._v("M:N 模型需要更大的语言运行时来管理线程")])]),t._v(" "),a("h3",{attrs:{id:"选择线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择线程模型"}},[t._v("#")]),t._v(" 选择线程模型")]),t._v(" "),a("ul",[a("li",[t._v("Rust 标准库只提供了 1:1 线程模型的实现")]),t._v(" "),a("li",[t._v("由于Rust 是足够底层的语言，如果愿意牺牲性能来换取更好的线程运行控制和更低的上下文切换开销，可以使用实现了 M:N 模型的 Crate")])])])}),[],!1,null,null,null);s.default=e.exports}}]);