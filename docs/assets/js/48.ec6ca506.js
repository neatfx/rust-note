(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{241:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"使用-box-t-在堆上存储数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-box-t-在堆上存储数据"}},[s._v("#")]),s._v(" 使用 "),a("code",[s._v("Box<T>")]),s._v(" 在堆上存储数据")]),s._v(" "),a("p",[a("code",[s._v("Box<T>")]),s._v(" 是最简单的智能指针类型，它允许将值放在堆上（ 留在栈上的则是指向堆数据的指针 ），除了提供间接存储和堆分配，并无其他额外的特殊功能，也没有这些功能带来的性能损失。")]),s._v(" "),a("p",[a("code",[s._v("Box<T>")]),s._v(" 实现了 "),a("code",[s._v("Deref")]),s._v("、"),a("code",[s._v("Drop")]),s._v(" 特质，其值可被当作引用对待，当值离开作用域时，"),a("code",[s._v("Box<T>")]),s._v(" 实例指向的堆数据将被清除。")]),s._v(" "),a("p",[a("code",[s._v("Box<T>")]),s._v(" 多用于以下场景：")]),s._v(" "),a("ul",[a("li",[s._v("在需要知道类型确切大小的上下文中使用一个编译时无法确定大小的类型（ 比如可以基于 "),a("code",[s._v("Box<T>")]),s._v(" 提供的间接存储功能，实现编译时大小确定的递归类型 ）")]),s._v(" "),a("li",[s._v("在不使用复制的情况下转移大量数据的所有权（ 只有少量指针数据在栈上被复制，避免栈上复制大量数据产生不必要的性能损耗 ）")]),s._v(" "),a("li",[s._v("希望拥有一个实现了特定特质的任意类型的值（ 参阅 “面向对象特性” 部分中的 “为使用不同类型的值而设计的特质对象” 章节 ）")])]),s._v(" "),a("h2",{attrs:{id:"在堆上储存数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在堆上储存数据"}},[s._v("#")]),s._v(" 在堆上储存数据")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 在堆上储存一个 i32 值")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b = {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 像访问栈数据一样访问堆数据，正如拥有数据所有权的值那样")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// b 离开作用域并被释放（ 位于栈上 ），b 所指向的数据（ 位于堆上 ）也同时被释放")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("将一个单独的值存储在堆上的意义不大，通常是将其储存在栈上，但有些类型在不使用 "),a("code",[s._v("Box<T>")]),s._v(" 的情况下无法定义，比如递归类型。")]),s._v(" "),a("h2",{attrs:{id:"创建递归类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建递归类型"}},[s._v("#")]),s._v(" 创建递归类型")]),s._v(" "),a("p",[s._v("Rust 需要在编译时知道类型占用多少空间，而递归类型（ recursive type ）无法在编译时知道确切大小。通过在递归类型定义中插入 "),a("code",[s._v("Box<T>")]),s._v("，可以在 Rust 中创建递归类型。")]),s._v(" "),a("h3",{attrs:{id:"非递归类型的大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非递归类型的大小"}},[s._v("#")]),s._v(" 非递归类型的大小")]),s._v(" "),a("p",[s._v("枚举类型 "),a("code",[s._v("Message")]),s._v(" 值的大小等于存储其最大成员的所需的空间大小")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" Message "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Quit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不需要任何空间")]),s._v("\n    Move "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" i32 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 需要足够储存两个 i32 值的空间")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ChangeColor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"编译时无确切大小的递归类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译时无确切大小的递归类型"}},[s._v("#")]),s._v(" 编译时无确切大小的递归类型")]),s._v(" "),a("p",[a("code",[s._v("cons list")]),s._v(" 是一个源于 Lisp 编程语言的数据结构，其每一项都包含两个元素：当前项的值、下一项。其最后一项的值仅包含一个叫做 "),a("code",[s._v("Nil")]),s._v(" 的值，没有下一项。")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("Lisp")]),s._v(" 语言中，"),a("code",[s._v("cons")]),s._v(" 函数以一个值和一个列表作为参数生成一个新的列表。")]),s._v(" "),a("p",[a("code",[s._v("cons list")]),s._v(" 通过递归调用 "),a("code",[s._v("cons")]),s._v(" 函数产生，遇到 "),a("code",[s._v("Nil")]),s._v(" 值时递归结束，表示列表终止。")]),s._v(" "),a("p",[a("code",[s._v("cons list")]),s._v(" 并非 Rust 中常见的类型，在 Rust 中创建列表的时候，"),a("code",[s._v("Vec<T>")]),s._v(" 通常是一个更好的选择。")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 利用泛型，以下数据结构可以存放任何类型值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" List "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    Nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Cons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("编译以上代码会得到错误：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[s._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("E0072"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" recursive "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" `List` has infinite size\n "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" src"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("main"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("rs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" List "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" recursive "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" has infinite size\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("     "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" recursive without indirection\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" help"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" insert "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("indirection")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" a `Box`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" `Rc`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" or `"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v("`"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" at some point to\n  make `List` representable\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("错误信息表明 "),a("code",[s._v("List")]),s._v(" 类型 “有无限的大小”，原因在于 "),a("code",[s._v("List")]),s._v(" 的成员被定义为是递归的，当 Rust 编译器尝试计算出储存一个 "),a("code",[s._v("List")]),s._v(" 枚举需要多少内存，会检查 "),a("code",[s._v("Cons")]),s._v(" 成员，"),a("code",[s._v("Cons")]),s._v(" 需要的空间等于 "),a("code",[s._v("i32")]),s._v(" 的大小加上 "),a("code",[s._v("List")]),s._v(" 的大小。为了计算 "),a("code",[s._v("List")]),s._v(" 需要多少内存，编译器检查其成员，从 "),a("code",[s._v("Cons")]),s._v(" 成员开始。"),a("code",[s._v("Cons")]),s._v(" 成员储存了一个 "),a("code",[s._v("i32")]),s._v(" 值和一个 "),a("code",[s._v("List")]),s._v(" 值，计算将无限进行下去。这意味着 Rust 无法计算为了存放 "),a("code",[s._v("List")]),s._v(" 的值到底需要多少空间。")]),s._v(" "),a("p",[s._v("编译信息也包含了建议， “indirection” 表明相比直接储存一个值应当间接的储存一个指向值的指针。")]),s._v(" "),a("h3",{attrs:{id:"创建编译时具有确切大小的递归类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建编译时具有确切大小的递归类型"}},[s._v("#")]),s._v(" 创建编译时具有确切大小的递归类型")]),s._v(" "),a("p",[a("code",[s._v("Box<T>")]),s._v(" 是一个指针，其存储空间大小固定，不会随着其指向的堆数据量改变。因此可将 "),a("code",[s._v("Box")]),s._v(" 作为 "),a("code",[s._v("Cons")]),s._v(" 的下一项，"),a("code",[s._v("Box")]),s._v(" 指向另一个位于堆上的 "),a("code",[s._v("List")]),s._v(" 值（ 而不是存放在 "),a("code",[s._v("Cons")]),s._v(" 成员中，"),a("code",[s._v("Cons")]),s._v(" 成员所需空间也更少 ）。这种实现列表的方式更像是一个项挨着另一项，而不是一项包含另一项。")]),s._v(" "),a("p",[s._v("现在，编译器能够计算出 "),a("code",[s._v("List")]),s._v(" 类型的大小 - "),a("strong",[s._v("最多需一个 "),a("code",[s._v("i32")]),s._v(" 的大小加上 "),a("code",[s._v("Box")]),s._v(" 指针数据的大小")])]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" List "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Box"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("List"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    Nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("Cons"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n        Box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n            Box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                Box"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Nil"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);